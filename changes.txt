* Remove ctx dependency
* Remove format/engine distinction (or improve definitions)
* Default root of engines = tpl.root
* Do not expose renderer, add its API to ConfiguredModule api instead
* Remove default format
* Templates may return binaries
  (implication: binary-compatible engines should also accept binaries)
* Remove filter and function definitions



.jinja2:
    renderers: jinja2
    output: text/html

.css:
    renderers: css
    output: text/css

.scss:
    renderers: scss
    output: text/css

.scss.jinja2:
    renderers:
        - scss
        - jinja2
    output: text/css

.css.jinja2:
    renderers:
        - jinja2
    output: text/css

.php:
    renderers: php
    output: text/html

.js:
    renderers: -
    output: application/javascript

.json:
    renderers: -
    output: application/json

.json.jinja2:
    loader: FtpLoader
    renderers: jinja2
    output: application/json



filetype.scss_jinja2.engines =
    score.jinja2.Engine()
    score.scss.Engine()
filetype.scss_jinja2.extension = .scss.jinja2
filetype.scss_jinja2.mimetype = text/css

filetype.jinja2.loader = some.Loader()
filetype.jinja2.engine = score.jinja2.Engine()
filetype.jinja2.extension = .json.jinja2
filetype.jinja2.mimetype = application/json

filetype.php.engine = score.php.Engine()
filetype.php.extension = .php
filetype.php.mimetype = text/html

filetype.js.loader = conf:js.loader
filetype.js.extension = .js
filetype.js.mimetype = application/javascript



class Engine():

    def __init__(self, mimetype):
        pass


* do we need a rootdir?
